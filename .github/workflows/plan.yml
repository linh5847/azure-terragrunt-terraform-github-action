### Reusable workflow to plan terraform deployment, create artifact and upload to workflow artifacts for consumption ###
name: "Build_TF_Plan"
on:
  workflow_call:
    inputs:
      path:
        description: "Specifies the path of the root terraform module."
        required: true
        type: string
      tf_version:
        description: "Specifies version of Terraform to use. e.g: 1.1.0 Default=latest."
        required: false
        type: string
        default: latest
      az_resource_group:
        description: "Specifies the Azure Resource Group where the backend storage account is hosted."
        required: true
        type: string
      az_storage_acc:
        description: "Specifies the Azure Storage Account where the backend state is hosted."
        required: true
        type: string
      az_container_name:
        description: "Specifies the Azure Storage account container where backend Terraform state is hosted."
        required: true
        type: string
      tf_key:
        description: "Specifies the Terraform state file name for this plan. Workflow artifact will use same name"
        required: true
        type: string
      gh_environment:
        description: "Specifies the GitHub deployment environment."
        required: false
        type: string
        default: null
      tf_vars_file:
        description: "Specifies the Terraform TFVARS file."
        required: true
        type: string
      enable_TFSEC:
        description: "(Optional) Enables TFSEC IaC scans and code quality checks on Terraform configurations"
        required: false
        type: boolean
        default: false
    secrets:
      arm_client_id:
        description: "Specifies the Azure ARM CLIENT ID."
        required: true
      arm_client_secret:
        description: "Specifies the Azure ARM CLIENT SECRET."
        required: true
      arm_subscription_id:
        description: "Specifies the Azure ARM SUBSCRIPTION ID."
        required: true
      arm_tenant_id:
        description: "Specifies the Azure ARM TENANT ID."
        required: true

jobs:
  build-plan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.gh_environment }}
    defaults:
      run:
        shell: bash
        #working-directory: ${{ inputs.path }}
    env:
      # STORAGE_ACCOUNT: ${{ inputs.az_storage_acc }}
      # CONTAINER_NAME: ${{ inputs.az_container_name }}
      # RESOURCE_GROUP: ${{ inputs.az_resource_group }}
      # TF_KEY: ${{ inputs.tf_key }}.tfstate
      # TF_VARS: ${{ inputs.tf_vars_file }}
      ###AZURE Client details###
      ARM_CLIENT_ID: ${{ secrets.DEV_ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{ secrets.DEV_ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.DEV_ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.DEV_ARM_TENANT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3.6.0

      - name: Scan IaC - tfsec
        if: ${{ inputs.ENABLE_TFSEC == 'true' }}
        uses: aquasecurity/tfsec-sarif-action@v0.1.3
        with:
          sarif_file: tfsec.sarif

      - name: Upload SARIF file
        if: ${{ inputs.ENABLE_TFSEC == 'true' }}
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: tfsec.sarif

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: 0.37.1

      - name: Interact with Terragrunt
        run: terragrunt --version

      - name: "Terragrunt Init"
        run: terragrunt run-all init --terragrunt-non-interactive
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: "Terragrunt Plan"
        run: terragrunt run-all plan --terragrunt-non-interactive
        working-directory: ${{ env.WORKING_DIRECTORY }}
  deployment:
    needs: plan
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@master

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
          terraform_wrapper: false

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: 0.37.1
      - name: "Terragrunt Apply"
        run: terragrunt run-all apply --terragrunt-non-interactive
        working-directory: ${{ inputs.path }}
